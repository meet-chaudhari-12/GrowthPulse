@model IEnumerable<GrowthPulse.ViewModels.ListingViewModel>

@{
    ViewData["Title"] = "Marketplace";
}

<div class="text-center mb-5">
    <h1 class="display-4 text-primary">Welcome to the Marketplace</h1>
    <p class="lead">Browse our collection of beautiful plants and add them to your cart</p>
</div>

<div class="row mb-4">
    <div class="col-12">
        <div class="card filter-card">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <h5 class="mb-0">
                            <i class="fas fa-filter text-primary"></i>
                            Filter Products
                        </h5>
                    </div>
                    <div class="col-md-6 text-right">
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="showOutOfStock" checked>
                            <label class="form-check-label" for="showOutOfStock">
                                <i class="fas fa-eye"></i> Show Out of Stock Items
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    @if (Model != null && Model.Any())
    {
        @foreach (var listing in Model)
        {
            <div class="col-lg-4 col-md-6 mb-4 @(listing.StockQuantity == 0 ? "out-of-stock-item" : "")">
                <div class="card h-100 marketplace-card @(listing.StockQuantity == 0 ? "out-of-stock" : "")">
                    <div class="position-relative">
                        <img src="@listing.PhotoUrl" class="card-img-top" alt="@listing.Name" style="height: 250px; object-fit: cover;">
                        @if (listing.StockQuantity == 0)
                        {
                            <div class="out-of-stock-overlay">
                                <span class="badge badge-danger">Out of Stock</span>
                            </div>
                        }
                    </div>
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-primary">@listing.Name</h5>
                        <p class="card-text text-muted">@listing.Description</p>
                        <div class="price-section mb-3">
                            <h4 class="text-success mb-0">@listing.Price.ToString("C")</h4>
                            <small class="text-muted">per item</small>
                        </div>
                        <div class="stock-info mb-3">
                            @if (listing.StockQuantity > 0)
                            {
                                <span class="badge badge-success">@listing.StockQuantity available</span>
                            }
                            else
                            {
                                <span class="badge badge-danger">Out of Stock</span>
                            }
                        </div>
                        <div class="mt-auto">
                            @if (listing.StockQuantity > 0)
                            {
                                <div class="row gx-2">
                                    <div class="col-7">
                                        <div class="quantity-selector">
                                            <button type="button" class="quantity-btn minus-btn" onclick="decreaseQuantity(@listing.Id)">-</button>
                                            <input type="number" class="quantity-input" id="quantity-@listing.Id" value="1" min="1" max="@listing.StockQuantity">
                                            <button type="button" class="quantity-btn plus-btn" onclick="increaseQuantity(@listing.Id, @listing.StockQuantity)">+</button>
                                        </div>
                                    </div>
                                    <div class="col-5">
                                        <button class="btn btn-primary btn-sm w-100" onclick="addToCart(@listing.Id)" id="add-btn-@listing.Id">
                                            <i class="fas fa-cart-plus"></i> Add
                                        </button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="row">
                                    @for (int i = 0; i < 3; i++) // Show 3 out-of-stock item buttons
                                    {
                                        <div class="col-4 mb-2">
                                            <button class="btn btn-outline-danger btn-sm w-100" disabled>
                                                <i class="fas fa-times"></i> Out
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="text-center py-5">
                <i class="fas fa-seedling fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">No products available</h4>
                <p class="text-muted">Please check back later for new arrivals!</p>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        function addToCart(listingId) {
            var quantity = parseInt(document.getElementById('quantity-' + listingId).value);
            
            fetch('/Cart/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: 'listingId=' + listingId + '&quantity=' + quantity
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {

                    updateCartCount(data.cartCount);
                    

                    showNotification('Item added to cart!', 'success');
                    
                    var btn = document.getElementById('add-btn-' + listingId);
                    var originalText = btn.innerHTML;
                    btn.innerHTML = '<i class="fas fa-check"></i> Added!';
                    btn.classList.remove('btn-primary');
                    btn.classList.add('btn-success');
                    
                    setTimeout(() => {
                        btn.innerHTML = originalText;
                        btn.classList.remove('btn-success');
                        btn.classList.add('btn-primary');
                    }, 2000);
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                showNotification('Error adding item to cart', 'error');
            });
        }

        function increaseQuantity(listingId, maxQuantity) {
            var input = document.getElementById('quantity-' + listingId);
            var currentValue = parseInt(input.value);
            if (currentValue < maxQuantity) {
                input.value = currentValue + 1;
            }
        }

        function decreaseQuantity(listingId) {
            var input = document.getElementById('quantity-' + listingId);
            var currentValue = parseInt(input.value);
            if (currentValue > 1) {
                input.value = currentValue - 1;
            }
        }

        function updateCartCount(count) {
            var cartCountElement = document.getElementById('cart-count');
            if (cartCountElement) {
                cartCountElement.textContent = count;
                cartCountElement.style.display = count > 0 ? 'inline' : 'none';
            }
        }


        function toggleOutOfStock() {
            var checkbox = document.getElementById('showOutOfStock');
            var outOfStockItems = document.querySelectorAll('.out-of-stock-item');
            
            if (checkbox.checked) {

                outOfStockItems.forEach(function(item) {
                    item.style.display = 'block';
                    item.classList.remove('hidden');
                });
            } else {

                outOfStockItems.forEach(function(item) {
                    item.style.display = 'none';
                    item.classList.add('hidden');
                });
            }
        }

        // Initialize 
        document.addEventListener('DOMContentLoaded', function() {
            var checkbox = document.getElementById('showOutOfStock');
            checkbox.addEventListener('change', toggleOutOfStock);
        });

        function showNotification(message, type) {
            // Create notification element
            var notification = document.createElement('div');
            notification.className = 'alert alert-' + (type === 'success' ? 'success' : 'danger') + ' alert-dismissible fade show position-fixed';
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = message + '<button type="button" class="close" data-dismiss="alert"><span>&times;</span></button>';
            
            document.body.appendChild(notification);
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

    </script>
}